<?php

namespace app\models\bitrix;

use app\models\logger\DebugLogger;
use GuzzleHttp\Client;
use Yii;
use yii\web\Controller;
use app\modules\society_app\models\Client as BitrixApp;
use app\models\logger\DebuLogger;
use yii\base\Widget;
use app\models\bitrix\Bitrix;
use PHPHtmlParser\Dom;


class ClientController extends Controller
{
    public function runAction($id, $params = [])
    {
        $token = Yii::$app->params['webhookBx24'] ?? null;
        $requestToken = Yii::$app->request->get('token');

        if(empty($requestToken) && $token !== $requestToken)
        {
            return $this->actionAccessDenied();
        }

        return parent::runAction($id, $params); // TODO: Change the autogenerated stub
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;

        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        $app = new BitrixApp();
        echo "123123";
        die;

        echo "<pre>";
        $response = $app->request("userfieldtype.add", [
            "USER_TYPE_ID" => "subs",
            "TITLE" => "Поле вывода кол-ва подписчиков соц.сетей",
            "DESCRIPTION" => "Поле вывода кол-ва подписчиков соц.сетей",
            "HANDLER" => "https://sekvid.ru/for_del/webhook_aldan_GYxOeLR2Vh/web/society-app/subscribers?token=31578325-649a-4372-99f8-301404badb8b",
        ]);
        $response = $app->request("crm.contact.list", ["filter" => ["ID" => 352], "select" => ["ID", "TITLE", "UF_CRM_1661343725621"]]);
        $app->request("crm.contact.update", [
            "ID" => 352,
            "fields" => [
                "UF_CRM_1661343725621" => [json_encode(["Вк" => 500, "Youtube" => 400])]
            ]
        ]);

        print_r($response);

        /*
         $app = new BitrixApp();


        $client = new Client();
        $response = $client->request("POST", "https://vk.com/lookpics");
        */

    }

    public function actionSubscribers() // при вызове рест поля
    {
        $post_data  = Yii::$app->request->post();
        ['ENTITY_VALUE_ID' => $id_company] = json_decode($post_data['PLACEMENT_OPTIONS'],true);
        $app = new BitrixApp();
        ['result' => $company] = $app->request("crm.company.get", ["ID" => $id_company]);
        $info_from_company  = json_decode($company['UF_CRM_1661511134909'], true);
        foreach ($info_from_company as $key => $value){
            if ($value > 0){
                echo "<span>".$key . ': ' .$value."</span>";
                echo "<pre>";
            }
        }

    }

    public function actionGetCompanyCron() // для крона
    {
        $app = new BitrixApp();
        $client = new Client();
        ["total" => $countCompany] = $app->request("crm.company.list");
        $batch = [];
        $webhook = Bitrix::BX24init();
        $commands = [];
        for ($i = 0; $i < $countCompany / 50; $i++) {
            $commands[] = $webhook->buildCommand('crm.company.list',[
                "start" => $i * 50,
                "select" => ['ID', "UF_CRM_1661511134909","TITLE","UF_CRM_1660293963093","UF_CRM_1660293981497","UF_CRM_1660293999081"],
                // "filter" => ["!UF_CRM_1661511134909" => ""]
            ]);
        }
        // $batch = array_chunk($batch, 50); //разбиваем по 50 эл

        $responseBatch = $webhook->batchRequest($commands);
        foreach ($responseBatch as $key => $value){
            foreach ($value as $key2){

                $response = $client->request('POST', 'https://sekvid.ru/for_del/webhook_aldan_GYxOeLR2Vh/web/society-app/company-update?token=31578325-649a-4372-99f8-301404badb8b', [
                    'form_params' => [
                        'data' => ['FIELDS'=> ['ID' => $key2['ID']]],
                    ]
                ]);
                echo "<pre>";
                print_r($key2);
                if ($key2['ID'] == 10){
                    die;

                }
            }
        }
        //  foreach ($batch as $key => $commands) {
        //$result = $app->request($commands['method'],$commands['params']);//поменять на норм запрос
        //   $result = $app->batchRequest($commands,true);
        //..buildCommands
        // batchRequest(array $commands, $halt = true) :array Отправляет пакет запросов в API.
        // $response = $client->request('POST', 'https://sekvid.ru/for_del/webhook_aldan_GYxOeLR2Vh/web/society-app/company-update?token=31578325-649a-4372-99f8-301404badb8b', [
        //     'form_params' => [
        //         'data' => ['FIELDS'=> ['ID' => $result['result'][0]['ID']]],
        //     ]
        //  ]);

        // print_r($result);



    }
    public function actionCompanyUpdate() //webhook при изменении компании или добавлении
    {
        header("Content-Type: text/html;charset=utf-8");
        $data_request = Yii::$app->request->post();
        $id_company = 4;//$data_request['data']['FIELDS']['ID'];
        //$logger = DebugLogger::instance('ContactUpdate');
        //$logger->save($data_request, Yii::$app->request, 'otv');
        $app = new BitrixApp();
        $client = new Client();
        $dom = new Dom;

        ['result' => $company] = $app->request("crm.company.get", ["ID" => $id_company]);
        $info_from_company  = json_decode($company['UF_CRM_1661511134909'], true);

        $url_youtube = explode('user/',$company['UF_CRM_1660293963093'])[1];
        if ($url_youtube == ''){
            $url_youtube = explode('/c/',$company['UF_CRM_1660293963093'])[1];
        }

        $url_youtube = explode('/', $url_youtube)[0];
        $url_vkontakte = $company['UF_CRM_1660293981497'];
        $url_yandexDzen = $company['UF_CRM_1660293999081'];
        print_r($url_yandexDzen);
        if ($info_from_company['Vkontakte']){
            $count_subs_vkontakte = $info_from_company['Vkontakte'];
        }else{
            $count_subs_vkontakte = 0;
        }
        if ($info_from_company['YandexDzen']){
            $count_subs_yandexDzen = $info_from_company['YandexDzen'];
        }else{
            $count_subs_yandexDzen = 0;
        }
        if ($info_from_company['Youtube']){
            $count_subs_youtube = $info_from_company['Youtube'];
        }else{
            $count_subs_youtube = 0;
        }

        if ($url_vkontakte != ''){
            $response = $client->request("GET", $url_vkontakte);
            $response = $response->getBody()->getContents(); // html страница

            $dom->loadStr($response);
            $a = $dom->find('.pm_counter');
            $count_subs_vkontakte = $a->text;
        }

        if ($url_youtube != ''){ //сделать ютуб
            $response = $client->request("GET", 'https://www.googleapis.com/youtube/v3/channels?part=statistics&forUsername='.$url_youtube.'&key=AIzaSyCe6fQiJR-TMxxi2rzA2DeIqq3vFZnFv8A');
            $response = $response->getBody()->getContents(); // html страница
            if (json_decode($response, true)['items']){
                $count_subs_youtube = json_decode($response, true)['items'][0]['statistics']['subscriberCount'];

            }else{
                $count_subs_youtube = 0;

            }

        }


        if ($url_yandexDzen != ''){
            ini_set("mbstring.regex_retry_limit", "10000000");
            $response = $client->request("GET", $url_yandexDzen);
            $response = $response->getBody()->getContents(); // html страница

            $dom->loadStr($response);
            print_r($dom);
            die;
            $a = $dom->find('.channel-counter .channel-counter__value');
            $count_subs_yandexDzen = $a->text;

        }

        $app->request("crm.company.update", [
            "ID" => $id_company,
            "fields" => [
                "UF_CRM_1661511134909" => json_encode([
                    "Vkontakte" => $count_subs_vkontakte,
                    "YandexDzen" => $count_subs_yandexDzen,
                    "Youtube" => $count_subs_youtube
                ])
            ]
        ]);
        //$logger = DebugLogger::instance('ContactUpdate');
        //$logger->save($data_request, Yii::$app->request, 'otv');
        return 200;
    }



    public function actionInstall()
    {
        $auth = collect(Yii::$app->request->post());

        $logger = DebugLogger::instance("install");
        $logger->save($auth, $auth, "Данные приложения");

        if(Yii::$app->request->isPost)
        {
            if($auth->has("auth"))
            {
                $auth = $auth["auth"];
            }

            $app = new Client($auth);
            $app->updateConfig();
        }

        return $this->render("install");
    }

    public function actionAccessDenied()
    {
        return $this->render('access_denied');
    }
}
